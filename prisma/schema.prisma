generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_USER
}

enum InvitationStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model User {
  id             String @id @default(uuid())
  name           String
  email          String @unique
  imageUrl       String @db.Text
  externalUserId String @unique

  associateWith Associate[]
  agency        Agency[]
  tickets       Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agency {
  id           String  @id @default(uuid())
  ownerId      String
  name         String
  agencyLogo   String? @db.Text
  companyEmail String  @db.Text
  companyPhone String
  address      String
  city         String
  zipCode      String
  state        String
  country      String

  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  associates  Associate[]
  workspaces  Workspace[]
  invitations Invitation[]
  media       Media[]
  canvas      Canvas[]
  boards      Board[]
  tags        Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Associate {
  id       String @id @default(uuid())
  userId   String
  agencyId String
  role     Role   @default(AGENCY_USER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agency Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agencyId, userId])
  @@index([agencyId])
  @@index([userId])
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  token    String           @unique
  agencyId String
  agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(AGENCY_USER)
  expires  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agencyId, email])
  @@index([agencyId])
}

model Workspace {
  id            String  @id @default(uuid())
  name          String
  description   String?
  subDomainName String? @unique
  favicon       String? @db.Text
  published     Boolean @default(false)

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  workspacePages WorkspacePage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model WorkspacePage {
  id           String  @id @default(uuid())
  name         String
  pathName     String  @default("")
  content      String? @db.Text
  order        Int
  previewImage String? @db.Text

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Media {
  id   String  @id @default(uuid())
  type String?
  name String
  link String  @unique

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model Canvas {
  id       String  @id @default(uuid())
  title    String  @default("Untitled")
  snapshot String?

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model Board {
  id   String @id @default(uuid())
  name String

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  lanes    Lane[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model Lane {
  id    String @id @default(uuid())
  name  String
  order Int    @default(0)

  boardId String
  board   Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Ticket {
  id          String    @id @default(uuid())
  name        String
  description String?
  order       Int       @default(0)
  due         DateTime?

  laneId String
  lane   Lane   @relation(fields: [laneId], references: [id], onDelete: Cascade)
  tags   Tag[]

  assignedUserId String?
  assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([laneId])
  @@index([assignedUserId])
}

model Tag {
  id    String @id @default(uuid())
  name  String
  color String

  agencyId String
  agency   Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  ticket   Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}
